{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contoso Software Solutions \u00b6 Welcome to the open source solutions of Contoso . Here you can find our Microsoft 365 integrations that we use to drive our business and enable our customers to do great things. Contoso Announces Release of Markdown File Handler for Microsoft 365 \u00b6 The new file handler solution allows our customers to easily create, edit, and preview Markdown files using our existing SaaS services. We are excited to introduce this integration with OneDrive and SharePoint allowing us to seamlessly embed our custom functionality alongside the standard UI. Read more about how we did it . Disclaimer","title":"Home"},{"location":"#contoso-software-solutions","text":"Welcome to the open source solutions of Contoso . Here you can find our Microsoft 365 integrations that we use to drive our business and enable our customers to do great things.","title":"Contoso Software Solutions"},{"location":"#contoso-announces-release-of-markdown-file-handler-for-microsoft-365","text":"The new file handler solution allows our customers to easily create, edit, and preview Markdown files using our existing SaaS services. We are excited to introduce this integration with OneDrive and SharePoint allowing us to seamlessly embed our custom functionality alongside the standard UI. Read more about how we did it . Disclaimer","title":"Contoso Announces Release of Markdown File Handler for Microsoft 365"},{"location":"disclaimer/","text":"This site describes a company that does not exist as a way to frame these examples for Microsoft partners. Contoso is not real and mentions of customers, deployments, etc are all part of the fictional narrative. The linked code examples and supporting content behind the examples are real.","title":"Disclaimer"},{"location":"file-handler/","text":"Contoso File Handler \u00b6 At Contoso we want to ensure our customers have the best experience with our proprietary file formats when working in Microsoft's SharePoint and OneDrive. To this end we created a File Handler for tight integration with the existing files experience. Our file handler allows us to control the create, edit, and preview actions for our registered extensions right from the standard UI. Why File Handlers \u00b6 This example uses Markdown as a custom file format, real-world examples include audio formats, charting files, drafting formats, image formats, or any file type not natively supported in Microsoft 365. The File Handler allows you to build rich tailored experiences for your users. You can also use file handlers to register new capabilities for existing formats such as Markdown which has native support. Your handler will be presented next to the other existing options. Integration \u00b6 Because the application used to implement the file handler is 100% hosted and controlled by us it can be written in any language and make use of any web technology we want. We chose Nodejs because our SharePoint Framework developers are already familiar with TypeScript and React . Read more about the technical details behind the solution . New \u00b6 When integrating with the new experience our file handler will be available in the \"New\" menu in OneDrive and SharePoint. When users select the menu option they will be redirected to the url registered within the file handler registration . This gives us the ability to provide a tailored experience across cloud providers without re-writing our entire codebase. We start with an empty editor in \"New\": We show a custom editor that displays the rendered Markdown as the user types: Edit \u00b6 For the editing experience we can click the file name, or use either the context menu: or the \"Open\" menu in the top menu bar after selecting a file Once you open the editor will be presented with a similar view as the create option, except the contents of the existing file are loaded for editing. Preview \u00b6 In preview mode we are able to show a rendered view of an existing file, accessed through the context menu Once in preview mode SharePoint and OneDrive render some UI elements to help us navigate within the library, highlighted here in blue. The remainder of the page is an iframe of our site where we can render the file.","title":"Overview"},{"location":"file-handler/#contoso-file-handler","text":"At Contoso we want to ensure our customers have the best experience with our proprietary file formats when working in Microsoft's SharePoint and OneDrive. To this end we created a File Handler for tight integration with the existing files experience. Our file handler allows us to control the create, edit, and preview actions for our registered extensions right from the standard UI.","title":"Contoso File Handler"},{"location":"file-handler/#why-file-handlers","text":"This example uses Markdown as a custom file format, real-world examples include audio formats, charting files, drafting formats, image formats, or any file type not natively supported in Microsoft 365. The File Handler allows you to build rich tailored experiences for your users. You can also use file handlers to register new capabilities for existing formats such as Markdown which has native support. Your handler will be presented next to the other existing options.","title":"Why File Handlers"},{"location":"file-handler/#integration","text":"Because the application used to implement the file handler is 100% hosted and controlled by us it can be written in any language and make use of any web technology we want. We chose Nodejs because our SharePoint Framework developers are already familiar with TypeScript and React . Read more about the technical details behind the solution .","title":"Integration"},{"location":"file-handler/#new","text":"When integrating with the new experience our file handler will be available in the \"New\" menu in OneDrive and SharePoint. When users select the menu option they will be redirected to the url registered within the file handler registration . This gives us the ability to provide a tailored experience across cloud providers without re-writing our entire codebase. We start with an empty editor in \"New\": We show a custom editor that displays the rendered Markdown as the user types:","title":"New"},{"location":"file-handler/#edit","text":"For the editing experience we can click the file name, or use either the context menu: or the \"Open\" menu in the top menu bar after selecting a file Once you open the editor will be presented with a similar view as the create option, except the contents of the existing file are loaded for editing.","title":"Edit"},{"location":"file-handler/#preview","text":"In preview mode we are able to show a rendered view of an existing file, accessed through the context menu Once in preview mode SharePoint and OneDrive render some UI elements to help us navigate within the library, highlighted here in blue. The remainder of the page is an iframe of our site where we can render the file.","title":"Preview"},{"location":"file-handler/tech-details/","text":"File Handler Solution Tech Details \u00b6 We built out file handler using Nextjs , React , and deployed on Nodejs . This approach allows our SharePoint Framework developers to use their existing knowledgeto expand our catalog of solutions. Nextjs \u00b6 Using Nextjs allows us to scale and leverage many of the capabilities we were looking for around React server side rendering, page routing, and rely on a widely used framework with broad community support. React \u00b6 Our developers were already familiar with React from building our other SharePoint Framework solutions so it was an easy choice to use it within our file handler. Because we host the code we could choose any framework and runtime. Monaco Editor \u00b6 We made sure to integrate the Monaco Editor to ensure out users had a familiar interface when editing the markdown. Nodejs \u00b6 We use Nodejs as a flexible runtime for our solution, allowing us to easily test locally while deploying via Vercel (creators of Nextjs) or our own hosting. Works great with small containers for maximum flexibility. More Information \u00b6 To learn more of the technical details we encourage you to have a look at the file handler solution folder including code tours and detailed descriptions of the solution.","title":"Tech Details"},{"location":"file-handler/tech-details/#file-handler-solution-tech-details","text":"We built out file handler using Nextjs , React , and deployed on Nodejs . This approach allows our SharePoint Framework developers to use their existing knowledgeto expand our catalog of solutions.","title":"File Handler Solution Tech Details"},{"location":"file-handler/tech-details/#nextjs","text":"Using Nextjs allows us to scale and leverage many of the capabilities we were looking for around React server side rendering, page routing, and rely on a widely used framework with broad community support.","title":"Nextjs"},{"location":"file-handler/tech-details/#react","text":"Our developers were already familiar with React from building our other SharePoint Framework solutions so it was an easy choice to use it within our file handler. Because we host the code we could choose any framework and runtime.","title":"React"},{"location":"file-handler/tech-details/#monaco-editor","text":"We made sure to integrate the Monaco Editor to ensure out users had a familiar interface when editing the markdown.","title":"Monaco Editor"},{"location":"file-handler/tech-details/#nodejs","text":"We use Nodejs as a flexible runtime for our solution, allowing us to easily test locally while deploying via Vercel (creators of Nextjs) or our own hosting. Works great with small containers for maximum flexibility.","title":"Nodejs"},{"location":"file-handler/tech-details/#more-information","text":"To learn more of the technical details we encourage you to have a look at the file handler solution folder including code tours and detailed descriptions of the solution.","title":"More Information"}]}