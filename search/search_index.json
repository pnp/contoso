{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contoso Software Solutions \u00b6 Welcome to the open source solutions of Contoso . Here you can find our Microsoft 365 integrations that we use to drive our business and enable our customers to do great things. Contoso Releases Secure SharePoint Document Generation Solution \u00b6 Our new SharePoint integration adds a button to document libraries enabling secure remote document generation on behalf of the current user. Read more about how we did it . Contoso Announces Release of Markdown File Handler for Microsoft 365 \u00b6 The new file handler solution allows our customers to easily create, edit, and preview Markdown files using our existing SaaS services. We are excited to introduce this integration with OneDrive and SharePoint allowing us to seamlessly embed our custom functionality alongside the standard UI. Read more about how we did it . Disclaimer","title":"Home"},{"location":"#contoso-software-solutions","text":"Welcome to the open source solutions of Contoso . Here you can find our Microsoft 365 integrations that we use to drive our business and enable our customers to do great things.","title":"Contoso Software Solutions"},{"location":"#contoso-releases-secure-sharepoint-document-generation-solution","text":"Our new SharePoint integration adds a button to document libraries enabling secure remote document generation on behalf of the current user. Read more about how we did it .","title":"Contoso Releases Secure SharePoint Document Generation Solution"},{"location":"#contoso-announces-release-of-markdown-file-handler-for-microsoft-365","text":"The new file handler solution allows our customers to easily create, edit, and preview Markdown files using our existing SaaS services. We are excited to introduce this integration with OneDrive and SharePoint allowing us to seamlessly embed our custom functionality alongside the standard UI. Read more about how we did it . Disclaimer","title":"Contoso Announces Release of Markdown File Handler for Microsoft 365"},{"location":"disclaimer/","text":"This site describes a company that does not exist as a way to frame these examples for Microsoft partners. Contoso is not real and mentions of customers, deployments, etc are all part of the fictional narrative. The linked code examples and supporting content behind the examples are real.","title":"Disclaimer"},{"location":"file-handler/","text":"Contoso File Handler \u00b6 At Contoso we want to ensure our customers have the best experience with our proprietary file formats when working in Microsoft's SharePoint and OneDrive. To this end we created a File Handler for tight integration with the existing files experience. Our file handler allows us to control the create, edit, and preview actions for our registered extensions right from the standard UI. Why File Handlers \u00b6 This example uses Markdown as a custom file format, real-world examples include audio formats, charting files, drafting formats, image formats, or any file type not natively supported in Microsoft 365. The File Handler allows you to build rich tailored experiences for your users. You can also use file handlers to register new capabilities for existing formats such as Markdown which has native support. Your handler will be presented next to the other existing options. Integration \u00b6 Because the application used to implement the file handler is 100% hosted and controlled by us it can be written in any language and make use of any web technology we want. We chose Nodejs because our SharePoint Framework developers are already familiar with TypeScript and React . Read more about the technical details behind the solution . New \u00b6 When integrating with the new experience our file handler will be available in the \"New\" menu in OneDrive and SharePoint. When users select the menu option they will be redirected to the url registered within the file handler registration . This gives us the ability to provide a tailored experience across cloud providers without re-writing our entire codebase. We start with an empty editor in \"New\": We show a custom editor that displays the rendered Markdown as the user types: Edit \u00b6 For the editing experience we can click the file name, or use either the context menu: or the \"Open\" menu in the top menu bar after selecting a file Once you open the editor will be presented with a similar view as the create option, except the contents of the existing file are loaded for editing. Preview \u00b6 In preview mode we are able to show a rendered view of an existing file, accessed through the context menu Once in preview mode SharePoint and OneDrive render some UI elements to help us navigate within the library, highlighted here in blue. The remainder of the page is an iframe of our site where we can render the file.","title":"Overview"},{"location":"file-handler/#contoso-file-handler","text":"At Contoso we want to ensure our customers have the best experience with our proprietary file formats when working in Microsoft's SharePoint and OneDrive. To this end we created a File Handler for tight integration with the existing files experience. Our file handler allows us to control the create, edit, and preview actions for our registered extensions right from the standard UI.","title":"Contoso File Handler"},{"location":"file-handler/#why-file-handlers","text":"This example uses Markdown as a custom file format, real-world examples include audio formats, charting files, drafting formats, image formats, or any file type not natively supported in Microsoft 365. The File Handler allows you to build rich tailored experiences for your users. You can also use file handlers to register new capabilities for existing formats such as Markdown which has native support. Your handler will be presented next to the other existing options.","title":"Why File Handlers"},{"location":"file-handler/#integration","text":"Because the application used to implement the file handler is 100% hosted and controlled by us it can be written in any language and make use of any web technology we want. We chose Nodejs because our SharePoint Framework developers are already familiar with TypeScript and React . Read more about the technical details behind the solution .","title":"Integration"},{"location":"file-handler/#new","text":"When integrating with the new experience our file handler will be available in the \"New\" menu in OneDrive and SharePoint. When users select the menu option they will be redirected to the url registered within the file handler registration . This gives us the ability to provide a tailored experience across cloud providers without re-writing our entire codebase. We start with an empty editor in \"New\": We show a custom editor that displays the rendered Markdown as the user types:","title":"New"},{"location":"file-handler/#edit","text":"For the editing experience we can click the file name, or use either the context menu: or the \"Open\" menu in the top menu bar after selecting a file Once you open the editor will be presented with a similar view as the create option, except the contents of the existing file are loaded for editing.","title":"Edit"},{"location":"file-handler/#preview","text":"In preview mode we are able to show a rendered view of an existing file, accessed through the context menu Once in preview mode SharePoint and OneDrive render some UI elements to help us navigate within the library, highlighted here in blue. The remainder of the page is an iframe of our site where we can render the file.","title":"Preview"},{"location":"file-handler/tech-details/","text":"File Handler Solution Tech Details \u00b6 We built out file handler using Nextjs , React , and deployed on Nodejs . This approach allows our SharePoint Framework developers to use their existing knowledgeto expand our catalog of solutions. Nextjs \u00b6 Using Nextjs allows us to scale and leverage many of the capabilities we were looking for around React server side rendering, page routing, and rely on a widely used framework with broad community support. React \u00b6 Our developers were already familiar with React from building our other SharePoint Framework solutions so it was an easy choice to use it within our file handler. Because we host the code we could choose any framework and runtime. Monaco Editor \u00b6 We made sure to integrate the Monaco Editor to ensure out users had a familiar interface when editing the markdown. Nodejs \u00b6 We use Nodejs as a flexible runtime for our solution, allowing us to easily test locally while deploying via Vercel (creators of Nextjs) or our own hosting. Works great with small containers for maximum flexibility. More Information \u00b6 To learn more of the technical details we encourage you to have a look at the file handler solution folder including code tours and detailed descriptions of the solution.","title":"Tech Details"},{"location":"file-handler/tech-details/#file-handler-solution-tech-details","text":"We built out file handler using Nextjs , React , and deployed on Nodejs . This approach allows our SharePoint Framework developers to use their existing knowledgeto expand our catalog of solutions.","title":"File Handler Solution Tech Details"},{"location":"file-handler/tech-details/#nextjs","text":"Using Nextjs allows us to scale and leverage many of the capabilities we were looking for around React server side rendering, page routing, and rely on a widely used framework with broad community support.","title":"Nextjs"},{"location":"file-handler/tech-details/#react","text":"Our developers were already familiar with React from building our other SharePoint Framework solutions so it was an easy choice to use it within our file handler. Because we host the code we could choose any framework and runtime.","title":"React"},{"location":"file-handler/tech-details/#monaco-editor","text":"We made sure to integrate the Monaco Editor to ensure out users had a familiar interface when editing the markdown.","title":"Monaco Editor"},{"location":"file-handler/tech-details/#nodejs","text":"We use Nodejs as a flexible runtime for our solution, allowing us to easily test locally while deploying via Vercel (creators of Nextjs) or our own hosting. Works great with small containers for maximum flexibility.","title":"Nodejs"},{"location":"file-handler/tech-details/#more-information","text":"To learn more of the technical details we encourage you to have a look at the file handler solution folder including code tours and detailed descriptions of the solution.","title":"More Information"},{"location":"list-view-invoke/","text":"Contoso Secure Remote Document Generation \u00b6 One of Contoso's key capabilities is generating documents on demand, directly within SharePoint document libraries. Enabling this scenario involved creating an SPFx List View Extension , Azure Function Application , and Azure Service Bus - along with properly configuring the authentication. All of the steps for setting up the demo solution can be found in the setup guide . If interested you can also read more about the technology behind the solution. Application Flow \u00b6","title":"Overview"},{"location":"list-view-invoke/#contoso-secure-remote-document-generation","text":"One of Contoso's key capabilities is generating documents on demand, directly within SharePoint document libraries. Enabling this scenario involved creating an SPFx List View Extension , Azure Function Application , and Azure Service Bus - along with properly configuring the authentication. All of the steps for setting up the demo solution can be found in the setup guide . If interested you can also read more about the technology behind the solution.","title":"Contoso Secure Remote Document Generation"},{"location":"list-view-invoke/#application-flow","text":"","title":"Application Flow"},{"location":"list-view-invoke/multi-tenant/","text":"Enable Multi-Tenant Authentication \u00b6 This article is an extension of setup covering extending your single-tenant testing application to support multi-tenant authentication. Beginning after you have completed all of the steps and tested that your application is working for single tenant you can now enable multi-tenant support. Sections \u00b6 Update AAD Application Update Function App Consent to Application in new Tenant Deploy App to New Tenant Next Steps Related Links Update AAD Application \u00b6 In Azure Portal locate the function application you created. Select \"Authentication\" under the \"Settings\" heading. Select the link to the associated Azure Active Directory Application registration Select \"Expose an API\" under the \"Manage\" heading. Update the App ID URI to a value including your tenant host name. Previously we used URL of the azure function application, which was OK for single tenant, but multiple tenants must have a way to uniquely identify your application. So a value \"https://myfunc.azurewebsites.net\" will become \"https://{tenant}.onmicrosoft.com/myfunc\". Select \"Authentication\" under the \"Manage\" heading. Update the Supported account types settings to Multitenant and select \"Save\" at the top. Update Function App \u00b6 In Azure Portal locate the function application you created. Select \"Authentication\" under the \"Settings\" heading. Select the pencil icon to edit the Identity Provider. Clear the issuer URL entry so it is blank and select \"Save\" Consent to Application in new Tenant \u00b6 Open the URL to your function app in a window authenticated to the target tenant and follow the authentication and consent flow. If you would like you may consent on behalf of your organization. This step is required to ensure our multi-tenant settings are working and to create the Enterprise Applicaiton entry in the new tenant so it can be found when approving the API permissions. Deploy App to New Tenant \u00b6 Follow the docs to deploy the solution and approve the permissions in the SharePoint admin site for the API. You will need to approve the API permissions in the SharePoint admin center for each tenant to which you deploy the solution. back to setup index Next Steps \u00b6 Submit to Store Related Links \u00b6 Consume multi-tenant enterprise APIs secured with Azure AD in SharePoint Framework","title":"Enable Multi-tenant Auth"},{"location":"list-view-invoke/multi-tenant/#enable-multi-tenant-authentication","text":"This article is an extension of setup covering extending your single-tenant testing application to support multi-tenant authentication. Beginning after you have completed all of the steps and tested that your application is working for single tenant you can now enable multi-tenant support.","title":"Enable Multi-Tenant Authentication"},{"location":"list-view-invoke/multi-tenant/#sections","text":"Update AAD Application Update Function App Consent to Application in new Tenant Deploy App to New Tenant Next Steps Related Links","title":"Sections"},{"location":"list-view-invoke/multi-tenant/#update-aad-application","text":"In Azure Portal locate the function application you created. Select \"Authentication\" under the \"Settings\" heading. Select the link to the associated Azure Active Directory Application registration Select \"Expose an API\" under the \"Manage\" heading. Update the App ID URI to a value including your tenant host name. Previously we used URL of the azure function application, which was OK for single tenant, but multiple tenants must have a way to uniquely identify your application. So a value \"https://myfunc.azurewebsites.net\" will become \"https://{tenant}.onmicrosoft.com/myfunc\". Select \"Authentication\" under the \"Manage\" heading. Update the Supported account types settings to Multitenant and select \"Save\" at the top.","title":"Update AAD Application"},{"location":"list-view-invoke/multi-tenant/#update-function-app","text":"In Azure Portal locate the function application you created. Select \"Authentication\" under the \"Settings\" heading. Select the pencil icon to edit the Identity Provider. Clear the issuer URL entry so it is blank and select \"Save\"","title":"Update Function App"},{"location":"list-view-invoke/multi-tenant/#consent-to-application-in-new-tenant","text":"Open the URL to your function app in a window authenticated to the target tenant and follow the authentication and consent flow. If you would like you may consent on behalf of your organization. This step is required to ensure our multi-tenant settings are working and to create the Enterprise Applicaiton entry in the new tenant so it can be found when approving the API permissions.","title":"Consent to Application in new Tenant"},{"location":"list-view-invoke/multi-tenant/#deploy-app-to-new-tenant","text":"Follow the docs to deploy the solution and approve the permissions in the SharePoint admin site for the API. You will need to approve the API permissions in the SharePoint admin center for each tenant to which you deploy the solution. back to setup index","title":"Deploy App to New Tenant"},{"location":"list-view-invoke/multi-tenant/#next-steps","text":"Submit to Store","title":"Next Steps"},{"location":"list-view-invoke/multi-tenant/#related-links","text":"Consume multi-tenant enterprise APIs secured with Azure AD in SharePoint Framework","title":"Related Links"},{"location":"list-view-invoke/setup/","text":"Demo Setup \u00b6 The demo has a number of piece to setup and this guide will step through each. The steps are ordered as some information is needed in subsequent steps or some actions need happen ahead of others. Please follow the guide to ensure your solution is properly configured. Sections \u00b6 Create Service Bus Queue Create Azure App Function Configure AAD App Settings Configure Local Settings Deploy Azure Function App Update SPFx Solution Deploy Solution Next Steps Create Service Bus Queue \u00b6 In Azure Portal select \"Create a resource\" Search for \"service bus\" and select the \"Service Bus\" option, then \"Create\" Select the subscription, resource group, namespace, and location then select \"Review + Create\" Review your choices and select \"Create\" Once provisioning is complete select \"Go to resource\" to load the resource page On the left, select \"Queues\" under the \"Entities\" section Select \"+ Queue\" at the top Provide a name for the new queue and note it for later. You may adjust other settings as needed but the remaining defaults are fine for this demo setup. Once ready select \"Create\" Once created select the name of the new queue to open the details screen On the left, select the \"Shared access policies\" under the \"Settings\" section Select \"+ Add\" at the top Give the policy a name and choose the \"Send\" and \"Listen\" options and select \"Create\" Once created select the policy to expose the keys and connection strings. Copy the value of \"Primary Connection String\". Paste it into a text editor and remove everything after and including the last \";\". Note this edited connection string for later. Endpoint=sb://{sb-name}.servicebus.windows.net/;SharedAccessKeyName={key-name};SharedAccessKey={shared-key};EntityPath={path} becomes: Endpoint=sb://{sb-name}.servicebus.windows.net/;SharedAccessKeyName={key-name};SharedAccessKey={shared-key} From this section you should record: Queue Name (step 8) Edited Queue Connection String (step 14) back to setup index Create Azure Functions App \u00b6 In Azure Portal select \"Create a resource\" Search for \"function app\" and select the \"Function App\" option, then \"Create\" Select a subscription, resource group, name, and region. For the remaining options: Publish: Code Runtime stack: Node.js Version: 14 LTS Select \"Review + Create\" as we will accept the remaining defaults. Ensure the options are correct and select \"Create\" Once provisioning is complete select \"Go to resource\" to load the resource page On the left, select \"Authentication\" under the \"Settings\" section Select \"Add identity provider\" In the dropdown select \"Microsoft\". Accept the defaults as shown below and select \"Next: permissions\". Select \"+ Add permission\" and choose \"User.Read\", \"offline_access\", \"openid\", and \"Files.ReadWrite.All\" then select \"Add\" Once the identity provider is created, select the \"edit\" pencil icon and remove the \"v2.0\" from the end of the \"Issuer URL\" value, leaving the final \"/\" in place. The value should be \"https://sts.windows.net/{your-tenant-id}/\" At this point, navigate to the url of your function you should be prompted to login and consent to the app permissions. If successful you will be land on a screen similar to below. The url will be of the form https://{app-name}.azurewebsites.net. This step is required to establish the enterprise app entry used later for app permissions approval. Navigate to \"Configuration\" under the \"Settings\" section of the function app. You need to add two keys whose values both come from the previous section on setting up the service bus. Once both are added select \"Save\" from at the top and \"Continue\" when prompted to update the app with the new settings. ServiceBusConnection = The edited service bus connection ServiceBusQueueName = The name of the queue MICROSOFT_PROVIDER_AUTHENTICATION_APPID = The App ID of the AAD app associated with the function Navigate to \"CORS\" under \"API\". Enter a \" \" for allowed origins and select \"Save\" at the top. Depending on your needs you can use this setting to limit what SP sites can call your API. The value of \" \" allows all domains to call the service, acceptable for the demo. From this section you should record: Azure Function App Url (step 11) back to setup index Configure AAD App Settings \u00b6 In the settings of the function app created in the previous section, select \"Authentication\" under the \"Settings\" section Copy the \"Display name\" and \"Application (client) ID\" for later Navigate to \"Expose an API\" under the \"Manage\" section Update the Application ID URI and set the value to match the URL of the Azure function and select save. The value will be https://{function-app-name}.azurewebsites.net Navigate to \"API Permissions\" under the \"Manage\" section Select the \"Grant Admin consent\" option to consent to all the permissions for the tenant if not already consented. From this section you should record: Azure Application Name (step 2) Azure Application ID (step 2) back to setup index Configure Local Settings \u00b6 To ensure smooth publishing of the application you need to create a \"local.settings.json\" file within the \"azure-functions\" folder. { \"IsEncrypted\": false, \"Values\": { \"FUNCTIONS_WORKER_RUNTIME\": \"node\", \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\" } back to setup index Deploy Azure Function App \u00b6 This section uses the Azure CLI to conduct the deployment. There are many ways to deploy apps to Azure and you should use the methods most comfortable to you. You also need to install the azure function tools v3 using npm i -g azure-functions-core-tools@3 --unsafe-perm true Open a command window and navigate to the project folder \"azure-function\" Enter az login to login to the Azure instance Run npm run build Run func azure functionapp publish {app-name} Within the Azure Portal, ensure the app is running and there are no deployment errors back to setup index Update SPFx Solution \u00b6 Open the solution in the \"spfx-list-view-command\" folder of the \"list-view-service-integration\" sample Edit the \"./config/package-solution.json\" file to include the \"webApiPermissionRequests\" section. Replace {app-name} with the name of your application from the previous section. \"webApiPermissionRequests\": [ { \"resource\": \"{app-name}\", \"scope\": \"user_impersonation\" }, { \"resource\": \"Windows Azure Active Directory\", \"scope\": \"User.Read\" } ], Update \"./sharepoint/assets/ClientSideInstance.xml\" and \"./sharepoint/assets/elements.xml\" changing the {app-name} and {app-id} values to those of your function app and backing AAD application. Update \"./config/serve.json\" changing the value of pageUrl to point to a document library in your development tenant, also update the properties for both serve configurations to set the apiAbsUrl and appId values. Finally, update \"./src/extensions/contoso/ContosoCommandSet.manifest.json\" updating the value \"https://{app-name}.azurewebsites.net/api/IconServer\" with your app name. back to setup index Deploy Solution \u00b6 Follow the docs to deploy the solution and approve the permissions in the SharePoint admin site for the API. back to setup index Next Steps \u00b6 At this point the solution is configured for testing in your local environment. While testing the expected behavior will follow the flow outlined in the overview page . Extend support for multi-tenant authentication SharePoint Framework Overview Review the Docs on extending list view command sets Review the Docs for deployment back to setup index","title":"Setup"},{"location":"list-view-invoke/setup/#demo-setup","text":"The demo has a number of piece to setup and this guide will step through each. The steps are ordered as some information is needed in subsequent steps or some actions need happen ahead of others. Please follow the guide to ensure your solution is properly configured.","title":"Demo Setup"},{"location":"list-view-invoke/setup/#sections","text":"Create Service Bus Queue Create Azure App Function Configure AAD App Settings Configure Local Settings Deploy Azure Function App Update SPFx Solution Deploy Solution Next Steps","title":"Sections"},{"location":"list-view-invoke/setup/#create-service-bus-queue","text":"In Azure Portal select \"Create a resource\" Search for \"service bus\" and select the \"Service Bus\" option, then \"Create\" Select the subscription, resource group, namespace, and location then select \"Review + Create\" Review your choices and select \"Create\" Once provisioning is complete select \"Go to resource\" to load the resource page On the left, select \"Queues\" under the \"Entities\" section Select \"+ Queue\" at the top Provide a name for the new queue and note it for later. You may adjust other settings as needed but the remaining defaults are fine for this demo setup. Once ready select \"Create\" Once created select the name of the new queue to open the details screen On the left, select the \"Shared access policies\" under the \"Settings\" section Select \"+ Add\" at the top Give the policy a name and choose the \"Send\" and \"Listen\" options and select \"Create\" Once created select the policy to expose the keys and connection strings. Copy the value of \"Primary Connection String\". Paste it into a text editor and remove everything after and including the last \";\". Note this edited connection string for later. Endpoint=sb://{sb-name}.servicebus.windows.net/;SharedAccessKeyName={key-name};SharedAccessKey={shared-key};EntityPath={path} becomes: Endpoint=sb://{sb-name}.servicebus.windows.net/;SharedAccessKeyName={key-name};SharedAccessKey={shared-key} From this section you should record: Queue Name (step 8) Edited Queue Connection String (step 14) back to setup index","title":"Create Service Bus Queue"},{"location":"list-view-invoke/setup/#create-azure-functions-app","text":"In Azure Portal select \"Create a resource\" Search for \"function app\" and select the \"Function App\" option, then \"Create\" Select a subscription, resource group, name, and region. For the remaining options: Publish: Code Runtime stack: Node.js Version: 14 LTS Select \"Review + Create\" as we will accept the remaining defaults. Ensure the options are correct and select \"Create\" Once provisioning is complete select \"Go to resource\" to load the resource page On the left, select \"Authentication\" under the \"Settings\" section Select \"Add identity provider\" In the dropdown select \"Microsoft\". Accept the defaults as shown below and select \"Next: permissions\". Select \"+ Add permission\" and choose \"User.Read\", \"offline_access\", \"openid\", and \"Files.ReadWrite.All\" then select \"Add\" Once the identity provider is created, select the \"edit\" pencil icon and remove the \"v2.0\" from the end of the \"Issuer URL\" value, leaving the final \"/\" in place. The value should be \"https://sts.windows.net/{your-tenant-id}/\" At this point, navigate to the url of your function you should be prompted to login and consent to the app permissions. If successful you will be land on a screen similar to below. The url will be of the form https://{app-name}.azurewebsites.net. This step is required to establish the enterprise app entry used later for app permissions approval. Navigate to \"Configuration\" under the \"Settings\" section of the function app. You need to add two keys whose values both come from the previous section on setting up the service bus. Once both are added select \"Save\" from at the top and \"Continue\" when prompted to update the app with the new settings. ServiceBusConnection = The edited service bus connection ServiceBusQueueName = The name of the queue MICROSOFT_PROVIDER_AUTHENTICATION_APPID = The App ID of the AAD app associated with the function Navigate to \"CORS\" under \"API\". Enter a \" \" for allowed origins and select \"Save\" at the top. Depending on your needs you can use this setting to limit what SP sites can call your API. The value of \" \" allows all domains to call the service, acceptable for the demo. From this section you should record: Azure Function App Url (step 11) back to setup index","title":"Create Azure Functions App"},{"location":"list-view-invoke/setup/#configure-aad-app-settings","text":"In the settings of the function app created in the previous section, select \"Authentication\" under the \"Settings\" section Copy the \"Display name\" and \"Application (client) ID\" for later Navigate to \"Expose an API\" under the \"Manage\" section Update the Application ID URI and set the value to match the URL of the Azure function and select save. The value will be https://{function-app-name}.azurewebsites.net Navigate to \"API Permissions\" under the \"Manage\" section Select the \"Grant Admin consent\" option to consent to all the permissions for the tenant if not already consented. From this section you should record: Azure Application Name (step 2) Azure Application ID (step 2) back to setup index","title":"Configure AAD App Settings"},{"location":"list-view-invoke/setup/#configure-local-settings","text":"To ensure smooth publishing of the application you need to create a \"local.settings.json\" file within the \"azure-functions\" folder. { \"IsEncrypted\": false, \"Values\": { \"FUNCTIONS_WORKER_RUNTIME\": \"node\", \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\" } back to setup index","title":"Configure Local Settings"},{"location":"list-view-invoke/setup/#deploy-azure-function-app","text":"This section uses the Azure CLI to conduct the deployment. There are many ways to deploy apps to Azure and you should use the methods most comfortable to you. You also need to install the azure function tools v3 using npm i -g azure-functions-core-tools@3 --unsafe-perm true Open a command window and navigate to the project folder \"azure-function\" Enter az login to login to the Azure instance Run npm run build Run func azure functionapp publish {app-name} Within the Azure Portal, ensure the app is running and there are no deployment errors back to setup index","title":"Deploy Azure Function App"},{"location":"list-view-invoke/setup/#update-spfx-solution","text":"Open the solution in the \"spfx-list-view-command\" folder of the \"list-view-service-integration\" sample Edit the \"./config/package-solution.json\" file to include the \"webApiPermissionRequests\" section. Replace {app-name} with the name of your application from the previous section. \"webApiPermissionRequests\": [ { \"resource\": \"{app-name}\", \"scope\": \"user_impersonation\" }, { \"resource\": \"Windows Azure Active Directory\", \"scope\": \"User.Read\" } ], Update \"./sharepoint/assets/ClientSideInstance.xml\" and \"./sharepoint/assets/elements.xml\" changing the {app-name} and {app-id} values to those of your function app and backing AAD application. Update \"./config/serve.json\" changing the value of pageUrl to point to a document library in your development tenant, also update the properties for both serve configurations to set the apiAbsUrl and appId values. Finally, update \"./src/extensions/contoso/ContosoCommandSet.manifest.json\" updating the value \"https://{app-name}.azurewebsites.net/api/IconServer\" with your app name. back to setup index","title":"Update SPFx Solution"},{"location":"list-view-invoke/setup/#deploy-solution","text":"Follow the docs to deploy the solution and approve the permissions in the SharePoint admin site for the API. back to setup index","title":"Deploy Solution"},{"location":"list-view-invoke/setup/#next-steps","text":"At this point the solution is configured for testing in your local environment. While testing the expected behavior will follow the flow outlined in the overview page . Extend support for multi-tenant authentication SharePoint Framework Overview Review the Docs on extending list view command sets Review the Docs for deployment back to setup index","title":"Next Steps"},{"location":"list-view-invoke/tech-details/","text":"List View Invoke Tech Details \u00b6 This solution was built using SharePoint Framework (SPFx), Azure Functions, and Azure Service Bus choices discussed below. We used TypeScript to build all of the pieces of our solution, however the function piece could just as easily been written in any language available to run on Azure Functions. SPFx, as a client-side technology, requires the use of TypeScript or JavaScript. Additionally, there is a list of reference links we found useful while building our solution. SharePoint Framework \u00b6 SharePoint Framework (SPFx) is the way to add UI features including client-side code in SharePoint Online. We used a List View Command Set extension to include our button directly into the UI for Libraries. This allows us to know to where we will write the generated document, along with who initiated the request. This is done using the built in capabilities of SPFx to call AAD secured APIs. Azure Functions \u00b6 Azure Functions are a cost effective, secure way to deploy solutions to Azure. While not appropriate for all applications the capabilities of functions met our needs. This solution could work similiarly using a full web app, VM, or other hosting while the flow remains the same. The key advantage of Azure Functions for us was the simple setup of authentication to ensure our solution is secure. We used two functions, one to receive and queue the request and a second to do the work, to illustrate one way to help handle scale by ensuring a quick response back to the user, while providing time to complete the operations. Azure Service Bus \u00b6 The Service Bus allows us to create a buffer between requests (fast, many) and document generation (slower). This is a lightweight way to scale an application and met our needs - we also considered Azure SQL , but simple messaging worked in this case. One consideration is that we are storing the user's bearer token within the queue message. OK for a sample, but the handling of tokens in production should adhear to the best available guidance . Reference Links \u00b6 We found the following list of links helpful while developing our solution: SPFx app \u00b6 Build your first ListView Command Set extension Connect to Azure AD-secured APIs in SharePoint Framework solutions Azure Functions \u00b6 Overview Tools Http Triggered Functions Create a function app for serverless code execution Securing Azure Functions Token Store Configure how end-users consent to applications Configure your App Service or Azure Functions app to use Azure AD login Azure Functions JavaScript developer guide Call API securely from browser code Microsoft identity platform and OAuth 2.0 On-Behalf-Of flow Service Bus \u00b6 Overview Send messages to and receive messages from Azure Service Bus queues (JavaScript)","title":"Tech Details"},{"location":"list-view-invoke/tech-details/#list-view-invoke-tech-details","text":"This solution was built using SharePoint Framework (SPFx), Azure Functions, and Azure Service Bus choices discussed below. We used TypeScript to build all of the pieces of our solution, however the function piece could just as easily been written in any language available to run on Azure Functions. SPFx, as a client-side technology, requires the use of TypeScript or JavaScript. Additionally, there is a list of reference links we found useful while building our solution.","title":"List View Invoke Tech Details"},{"location":"list-view-invoke/tech-details/#sharepoint-framework","text":"SharePoint Framework (SPFx) is the way to add UI features including client-side code in SharePoint Online. We used a List View Command Set extension to include our button directly into the UI for Libraries. This allows us to know to where we will write the generated document, along with who initiated the request. This is done using the built in capabilities of SPFx to call AAD secured APIs.","title":"SharePoint Framework"},{"location":"list-view-invoke/tech-details/#azure-functions","text":"Azure Functions are a cost effective, secure way to deploy solutions to Azure. While not appropriate for all applications the capabilities of functions met our needs. This solution could work similiarly using a full web app, VM, or other hosting while the flow remains the same. The key advantage of Azure Functions for us was the simple setup of authentication to ensure our solution is secure. We used two functions, one to receive and queue the request and a second to do the work, to illustrate one way to help handle scale by ensuring a quick response back to the user, while providing time to complete the operations.","title":"Azure Functions"},{"location":"list-view-invoke/tech-details/#azure-service-bus","text":"The Service Bus allows us to create a buffer between requests (fast, many) and document generation (slower). This is a lightweight way to scale an application and met our needs - we also considered Azure SQL , but simple messaging worked in this case. One consideration is that we are storing the user's bearer token within the queue message. OK for a sample, but the handling of tokens in production should adhear to the best available guidance .","title":"Azure Service Bus"},{"location":"list-view-invoke/tech-details/#reference-links","text":"We found the following list of links helpful while developing our solution:","title":"Reference Links"},{"location":"list-view-invoke/tech-details/#spfx-app","text":"Build your first ListView Command Set extension Connect to Azure AD-secured APIs in SharePoint Framework solutions","title":"SPFx app"},{"location":"list-view-invoke/tech-details/#azure-functions_1","text":"Overview Tools Http Triggered Functions Create a function app for serverless code execution Securing Azure Functions Token Store Configure how end-users consent to applications Configure your App Service or Azure Functions app to use Azure AD login Azure Functions JavaScript developer guide Call API securely from browser code Microsoft identity platform and OAuth 2.0 On-Behalf-Of flow","title":"Azure Functions"},{"location":"list-view-invoke/tech-details/#service-bus","text":"Overview Send messages to and receive messages from Azure Service Bus queues (JavaScript)","title":"Service Bus"}]}